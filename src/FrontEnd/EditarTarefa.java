/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FrontEnd;

import BackEnd.ListaTarefas;
import BackEnd.Projeto;
import BackEnd.Sistema;
import BackEnd.Tarefa;
import BackEnd.User;
import java.time.LocalDateTime;
import java.util.Calendar;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 * @author Flávio Santos(a89960)
 * @author João Silva(a89956)
 * @author Pedro Magalhães(a89169)
 */
public class EditarTarefa extends javax.swing.JFrame {

    private Sistema sistemaEditarTarefa;
    private Projeto projetoEditarTarefa;
    private Tarefa tarefaEditarTarefa;
    private ListaTarefas listaTarefasEditarTarefa;
    private DefaultListModel usersAssociadosListModel;
    private DefaultComboBoxModel listasTarefasComboBoxModel;

    public EditarTarefa(Sistema sistema, Projeto projeto, Tarefa tarefa) {
        sistemaEditarTarefa = sistema;
        projetoEditarTarefa = projeto;
        tarefaEditarTarefa = tarefa;
        usersAssociadosListModel = new DefaultListModel();
        listasTarefasComboBoxModel = new DefaultComboBoxModel<ListaTarefas>();
        listaTarefasEditarTarefa = projeto.getListaTarefasTarefaProjeto(tarefaEditarTarefa);
        initComponents();
        setLabelsVisible(false);           //Torna os labels de erro não visiveis
        setUserListsModels();             //Carrega utilizadores associados ao projeto para a lista modelo
        setListaTarefasComboModel();      //carrega as listas do projeto
        setCurrentValues();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);            //Fechar a janela não faz nada
        setTitle(sistemaEditarTarefa.NOMEPROGRAMA + " - EditarTarefa");         //Título da janela
        setIconImage(sistemaEditarTarefa.getIconFrame());          //Ícon da janela
        setLocationRelativeTo(null);              //Janela no meio do ecrã

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editarTarefaLabel = new javax.swing.JLabel();
        descriçãoLabel = new javax.swing.JLabel();
        títuloLabel = new javax.swing.JLabel();
        títuloTextField = new javax.swing.JTextField();
        selecionarButton = new javax.swing.JButton();
        dataLimiteLabel = new javax.swing.JLabel();
        userAssociadosTabbedPane = new javax.swing.JTabbedPane();
        userAssociadosScrollPane = new javax.swing.JScrollPane();
        userAssociadosLista = new javax.swing.JList<>();
        editarButton = new javax.swing.JButton();
        voltarButton = new javax.swing.JButton();
        horasLimiteComboBox = new javax.swing.JComboBox<>();
        minutosLimiteComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dataLimiteChooserCombo = new datechooser.beans.DateChooserCombo();
        nomeEmptyLabel = new javax.swing.JLabel();
        utilizadorEncarregueLabel = new javax.swing.JLabel();
        utilizadorEncarregueValue = new javax.swing.JLabel();
        utilizadorEncarrregueEmptyLabel = new javax.swing.JLabel();
        eliminarButton = new javax.swing.JButton();
        prioridadeLabel1 = new javax.swing.JLabel();
        prioridadeSlider = new javax.swing.JSlider();
        prioridadeLabel2 = new javax.swing.JLabel();
        descriçãoScrollPane = new javax.swing.JScrollPane();
        descriçãoEditorPane = new javax.swing.JEditorPane();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        listaTarefasEmptyLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(525, 700));
        setResizable(false);

        editarTarefaLabel.setFont(new java.awt.Font("Lucida Console", 0, 36)); // NOI18N
        editarTarefaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editarTarefaLabel.setText("Editar Tarefa");

        descriçãoLabel.setFont(new java.awt.Font("Lucida Console", 0, 18)); // NOI18N
        descriçãoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        descriçãoLabel.setText("Descrição");

        títuloLabel.setFont(new java.awt.Font("Lucida Console", 0, 18)); // NOI18N
        títuloLabel.setText("Título");

        títuloTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                títuloTextFieldKeyReleased(evt);
            }
        });

        selecionarButton.setText("Selecionar");
        selecionarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecionarButtonActionPerformed(evt);
            }
        });

        dataLimiteLabel.setFont(new java.awt.Font("Lucida Console", 0, 18)); // NOI18N
        dataLimiteLabel.setText("Data Limite");

        userAssociadosLista.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        userAssociadosLista.setToolTipText("");
        userAssociadosLista.setDragEnabled(true);
        userAssociadosScrollPane.setViewportView(userAssociadosLista);

        userAssociadosTabbedPane.addTab("Associados Projeto", userAssociadosScrollPane);

        editarButton.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        editarButton.setText("Editar");
        editarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarButtonActionPerformed(evt);
            }
        });

        voltarButton.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        voltarButton.setText("Voltar");
        voltarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarButtonActionPerformed(evt);
            }
        });

        horasLimiteComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        minutosLimiteComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));
        minutosLimiteComboBox.setToolTipText("Horas");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("Minutos");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Horas");

        dataLimiteChooserCombo.setFormat(1);
        dataLimiteChooserCombo.setFieldFont(new java.awt.Font("Dialog", java.awt.Font.BOLD, 18));
        dataLimiteChooserCombo.setLocale(new java.util.Locale("pt", "PT", ""));

        nomeEmptyLabel.setFont(new java.awt.Font("Lucida Console", 0, 18)); // NOI18N
        nomeEmptyLabel.setForeground(new java.awt.Color(250, 0, 0));
        nomeEmptyLabel.setText("*");

        utilizadorEncarregueLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        utilizadorEncarregueLabel.setText("Utilizador encarregue:");

        utilizadorEncarregueValue.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        utilizadorEncarrregueEmptyLabel.setFont(new java.awt.Font("Lucida Console", 0, 18)); // NOI18N
        utilizadorEncarrregueEmptyLabel.setForeground(new java.awt.Color(250, 0, 0));
        utilizadorEncarrregueEmptyLabel.setText("*");

        eliminarButton.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        eliminarButton.setText("Eliminar");
        eliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarButtonActionPerformed(evt);
            }
        });

        prioridadeLabel1.setFont(new java.awt.Font("Lucida Console", 1, 14)); // NOI18N
        prioridadeLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        prioridadeLabel1.setText("Baixa    Média    Alta");

        prioridadeSlider.setMajorTickSpacing(1);
        prioridadeSlider.setMaximum(2);
        prioridadeSlider.setMinorTickSpacing(1);
        prioridadeSlider.setValue(0);

        prioridadeLabel2.setFont(new java.awt.Font("Lucida Console", 1, 18)); // NOI18N
        prioridadeLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        prioridadeLabel2.setText("Prioridade");

        descriçãoScrollPane.setViewportView(descriçãoEditorPane);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Lista Tarefas");

        listaTarefasEmptyLabel.setFont(new java.awt.Font("Lucida Console", 0, 18)); // NOI18N
        listaTarefasEmptyLabel.setForeground(new java.awt.Color(250, 0, 0));
        listaTarefasEmptyLabel.setText("*");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(editarTarefaLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(títuloLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(títuloTextField))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dataLimiteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dataLimiteChooserCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(horasLimiteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(minutosLimiteComboBox, 0, 69, Short.MAX_VALUE))
                            .addComponent(descriçãoLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomeEmptyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(utilizadorEncarregueValue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(utilizadorEncarregueLabel, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(utilizadorEncarrregueEmptyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(prioridadeLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(prioridadeSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(prioridadeLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(listaTarefasEmptyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selecionarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(userAssociadosTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                            .addComponent(descriçãoScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE))
                        .addGap(0, 51, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(voltarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eliminarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editarTarefaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(títuloTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(nomeEmptyLabel))
                    .addComponent(títuloLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dataLimiteChooserCombo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dataLimiteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(horasLimiteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minutosLimiteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriçãoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descriçãoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(utilizadorEncarregueLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(utilizadorEncarregueValue, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(utilizadorEncarrregueEmptyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaTarefasEmptyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prioridadeLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prioridadeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prioridadeLabel1))
                    .addComponent(userAssociadosTabbedPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selecionarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(voltarButton)
                    .addComponent(editarButton)
                    .addComponent(eliminarButton))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void títuloTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_títuloTextFieldKeyReleased
        nomeEmptyLabel.setVisible(false);
        títuloTextField.setText(títuloTextField.getText());           //carrega o título da tarefa
        if (títuloTextField.getText().isEmpty()) {             //Se estiver vazio tornar nomeEmptyLabel visível
            nomeEmptyLabel.setVisible(true);
        }
    }//GEN-LAST:event_títuloTextFieldKeyReleased

    private void selecionarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecionarButtonActionPerformed
        if (!userAssociadosLista.isSelectionEmpty()) {         //seleciona o utilizador selecionado
            utilizadorEncarregueValue.setText(userAssociadosLista.getSelectedValue());
            utilizadorEncarrregueEmptyLabel.setVisible(false);
        }
    }//GEN-LAST:event_selecionarButtonActionPerformed

    private void voltarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarButtonActionPerformed
        sistemaEditarTarefa.getDashboardWindow().refreshUI();     //atualiza todas as janelas
        dispose();       //faz dispose da janela
    }//GEN-LAST:event_voltarButtonActionPerformed

    private void eliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarButtonActionPerformed
        if (!sistemaEditarTarefa.getCurrentSave().getListaProjetosSave().getListaProjetos().contains(projetoEditarTarefa)) {       //Se projeto não for encontrado manda mensagem de erro
            JOptionPane.showMessageDialog(this, "Este projeto não existe ou foi eliminado", "Erro ao editar tarefa.", JOptionPane.ERROR_MESSAGE);
            dispose();
        }

        if (!listaTarefasEditarTarefa.getListaTarefas().contains(tarefaEditarTarefa) || !projetoEditarTarefa.getListasTarefas().contains(listaTarefasEditarTarefa)) {         //se lista não for encontrada manda mensagem de erro
            JOptionPane.showMessageDialog(this, "A tarefa que tentou editar não existe ou foi eleminada", "Erro ao editar tarefa.", JOptionPane.ERROR_MESSAGE);
            dispose();
        }

        int confirmarInt = JOptionPane.showConfirmDialog(this, "Tem a certeza que pretende eliminar a tarefa " + tarefaEditarTarefa.getTítuloTarefa() + " ?", "Confirmação", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);           //Mensagem de confimação
        if (confirmarInt == 0) {          //se responder SIM

            listaTarefasEditarTarefa.removeTarefaListaTarefas(tarefaEditarTarefa);          //remove a tarefa da lista
            JOptionPane.showMessageDialog(this, "A tarefa " + tarefaEditarTarefa.getTítuloTarefa() + " foi eliminada com sucesso do projeto " + projetoEditarTarefa.getTítuloProjeto() + " .", "Tarefa Eliminada", JOptionPane.INFORMATION_MESSAGE);      //Mensagem de aviso
        }
        sistemaEditarTarefa.setSaved(false);          //Atualiza o estado do Sistema como não guardado
        sistemaEditarTarefa.getDashboardWindow().refreshUI();          //Atualiza todas as janelas
        dispose();       //faz dispose da janela
    }//GEN-LAST:event_eliminarButtonActionPerformed

    private void editarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarButtonActionPerformed
        if (!sistemaEditarTarefa.getCurrentSave().getListaProjetosSave().getListaProjetos().contains(projetoEditarTarefa)) {//Se projeto não for encontrado, mandar mensagem de erro
            JOptionPane.showMessageDialog(this, "Este projeto não existe ou foi eliminado", "Erro ao editar tarefa.", JOptionPane.ERROR_MESSAGE);
            dispose();
        }
        if (!listaTarefasEditarTarefa.getListaTarefas().contains(tarefaEditarTarefa) || !projetoEditarTarefa.getListasTarefas().contains(listaTarefasEditarTarefa)) {//Se projeto não for encontrado, mandar mensagem de erro
            JOptionPane.showMessageDialog(this, "A tarefa que tentou editar não existe ou foi eleminada", "Erro ao editar tarefa.", JOptionPane.ERROR_MESSAGE);
            dispose();
        }

        String erro = "";

        if (dataLimiteChooserCombo.getSelectedDate() != null) {
            if (LocalDateTime.of(dataLimiteChooserCombo.getSelectedDate().get(Calendar.YEAR), dataLimiteChooserCombo.getSelectedDate().get(Calendar.MONTH) + 1, dataLimiteChooserCombo.getSelectedDate().get(Calendar.DAY_OF_MONTH), horasLimiteComboBox.getSelectedIndex(), minutosLimiteComboBox.getSelectedIndex()).isBefore(LocalDateTime.now())) { //se data limite for antes da data atual
                erro += "Data Limite inválida (Data antes de Hoje).\n";
            }
            if (LocalDateTime.of(dataLimiteChooserCombo.getSelectedDate().get(Calendar.YEAR), dataLimiteChooserCombo.getSelectedDate().get(Calendar.MONTH) + 1, dataLimiteChooserCombo.getSelectedDate().get(Calendar.DAY_OF_MONTH), horasLimiteComboBox.getSelectedIndex(), minutosLimiteComboBox.getSelectedIndex()).isAfter(projetoEditarTarefa.getDataLimiteProjeto())){
                erro += "Data Limite inválida (Data após data limite do Projeto).\n";
            }
        } else {
            erro += "Data Limite inválida.\n";
        }

        if (títuloTextField.getText().isEmpty()) {//se título estiver vazio, adicionar ao erro
            erro += "Nome inválido.\n";
            títuloLabel.setVisible(true);
        }
        if (utilizadorEncarregueValue.getText().isEmpty()) {// se utilizador não estiver selecionado, adicionar ao erro
            erro += "Utilizador encarregue não selecionado\n";
            utilizadorEncarrregueEmptyLabel.setVisible(true);
        }
        if (jComboBox1.getSelectedIndex() == -1) { //se lista de tarefas não for selecionada, adicionar ao erro
            erro += "Lista de Tarefas não selecionada\n";
            listaTarefasEmptyLabel.setVisible(true);
        }
        if (!projetoEditarTarefa.getListasTarefas().contains((ListaTarefas) jComboBox1.getSelectedItem())) {
            JOptionPane.showMessageDialog(this, "A lista de Tarefas que selecionou não existe ou foi elimanda", "Erro ao editar tarefa.", JOptionPane.ERROR_MESSAGE);
            dispose();
        }

        if (!erro.isEmpty()) { //Se houver erros
            JOptionPane.showMessageDialog(this, erro, "Erro ao editar a Tarefa", JOptionPane.ERROR_MESSAGE); //manda mensagem de erro
        } else { //Se não houver erros
            int confirmarInt = JOptionPane.showConfirmDialog(this, "Tem a certeza que pretende editar a tarefa " + tarefaEditarTarefa.getTítuloTarefa() + " ?", "Confirmação", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);//Mensagem de confirmação
            if (confirmarInt == 0) {//Se responder SIM
                tarefaEditarTarefa.setDataLimiteTarefa(LocalDateTime.of(dataLimiteChooserCombo.getSelectedDate().get(Calendar.YEAR), dataLimiteChooserCombo.getSelectedDate().get(Calendar.MONTH) + 1, dataLimiteChooserCombo.getSelectedDate().get(Calendar.DAY_OF_MONTH), horasLimiteComboBox.getSelectedIndex(), minutosLimiteComboBox.getSelectedIndex()));//editar data limite da tarefa
                tarefaEditarTarefa.setTítuloTarefa(títuloTextField.getText()); //editar título da tarefa
                tarefaEditarTarefa.setDescriçãoTarefa(descriçãoEditorPane.getText()); //editar descrição da tarefa
                tarefaEditarTarefa.setAssociatedUserTarefa(sistemaEditarTarefa.getCurrentSave().getListaUsersSave().getUserListaUsers(utilizadorEncarregueValue.getText().substring(utilizadorEncarregueValue.getText().indexOf("( ") + 2, utilizadorEncarregueValue.getText().indexOf(" )")))); //editar utilizador associado à tarefa
                listaTarefasEditarTarefa.removeTarefaListaTarefas(tarefaEditarTarefa);//remove a tarefa da lista
                ListaTarefas lista = (ListaTarefas) jComboBox1.getSelectedItem();
                lista.addTarefaListaTarefas(tarefaEditarTarefa); //adiciona-la à lista selecionada

                switch (prioridadeSlider.getValue()) { //editar prioridade da tarefa
                    case 0:
                        tarefaEditarTarefa.setPrioridadeTarefa("Baixa");
                        break;
                    case 1:
                        tarefaEditarTarefa.setPrioridadeTarefa("Média");
                        break;
                    case 2:
                        tarefaEditarTarefa.setPrioridadeTarefa("Alta");
                        break;
                }
                sistemaEditarTarefa.setSaved(false); //Atualiza o estado do sistema como não gravado
                sistemaEditarTarefa.getDashboardWindow().refreshUI(); //Atualiza as janelas
                JOptionPane.showMessageDialog(this, "A tarefa " + tarefaEditarTarefa.getTítuloTarefa() + " foi editada com sucesso.", "Edição de tarefa", JOptionPane.INFORMATION_MESSAGE);//mensagem de aviso
                dispose();//dispose da janela
            }
        }
    }//GEN-LAST:event_editarButtonActionPerformed

    private void setLabelsVisible(boolean booleano) {
        nomeEmptyLabel.setVisible(booleano);
        utilizadorEncarrregueEmptyLabel.setVisible(booleano);
        listaTarefasEmptyLabel.setVisible(booleano);
    }

    public void setUserListsModels() {//Método que carrega os utilizadores associados para lista modelo de utilizadores
        for (User user : projetoEditarTarefa.getListaAssociatedUsersProjeto().getListaUsers()) {
            usersAssociadosListModel.addElement(user.getNomeUser() + " ( " + user.getUsernameUser() + " )");
        }
        usersAssociadosListModel.addElement(projetoEditarTarefa.getOwnerProjeto().getNomeUser() + " ( " + projetoEditarTarefa.getOwnerProjeto().getUsernameUser() + " )");
        userAssociadosLista.setModel(usersAssociadosListModel);
    }

    public void setCurrentValues() { //Método que carrega os valores da tarefa
        títuloTextField.setText(tarefaEditarTarefa.getTítuloTarefa());
        descriçãoEditorPane.setText(tarefaEditarTarefa.getDescriçãoTarefa());
        utilizadorEncarregueValue.setText(tarefaEditarTarefa.getAssociatedUserTarefa().getNomeUser() + " ( " + tarefaEditarTarefa.getAssociatedUserTarefa().getUsernameUser() + " )");
        switch (tarefaEditarTarefa.getPrioridadeTarefa()) {
            case "Baixa":
                prioridadeSlider.setValue(0);
                break;
            case "Média":
                prioridadeSlider.setValue(1);
                break;
            case "Alta":
                prioridadeSlider.setValue(2);
                break;
        }
        setSelectedDate();
        jComboBox1.setSelectedItem(listaTarefasEditarTarefa);
    }

    public void setSelectedDate() { //Carrega a data limite da tarefa
        LocalDateTime instant = tarefaEditarTarefa.getDataLimiteTarefa();
        Calendar calendarStart = Calendar.getInstance();
        horasLimiteComboBox.setSelectedIndex(tarefaEditarTarefa.getDataLimiteTarefa().getHour());
        minutosLimiteComboBox.setSelectedIndex(tarefaEditarTarefa.getDataLimiteTarefa().getMinute());
        calendarStart.set(instant.getYear(), instant.getMonthValue() - 1, instant.getDayOfMonth());
        dataLimiteChooserCombo.setSelectedDate(calendarStart);
    }

    public void setListaTarefasComboModel() { //Carrega as listas de tarefas para a combo box model
        listasTarefasComboBoxModel.removeAllElements();
        listasTarefasComboBoxModel.addAll(projetoEditarTarefa.getListasTarefas());
        jComboBox1.setModel(listasTarefasComboBoxModel);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private datechooser.beans.DateChooserCombo dataLimiteChooserCombo;
    private javax.swing.JLabel dataLimiteLabel;
    private javax.swing.JEditorPane descriçãoEditorPane;
    private javax.swing.JLabel descriçãoLabel;
    private javax.swing.JScrollPane descriçãoScrollPane;
    private javax.swing.JButton editarButton;
    private javax.swing.JLabel editarTarefaLabel;
    private javax.swing.JButton eliminarButton;
    private javax.swing.JComboBox<String> horasLimiteComboBox;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel listaTarefasEmptyLabel;
    private javax.swing.JComboBox<String> minutosLimiteComboBox;
    private javax.swing.JLabel nomeEmptyLabel;
    private javax.swing.JLabel prioridadeLabel1;
    private javax.swing.JLabel prioridadeLabel2;
    private javax.swing.JSlider prioridadeSlider;
    private javax.swing.JButton selecionarButton;
    private javax.swing.JLabel títuloLabel;
    private javax.swing.JTextField títuloTextField;
    private javax.swing.JList<String> userAssociadosLista;
    private javax.swing.JScrollPane userAssociadosScrollPane;
    private javax.swing.JTabbedPane userAssociadosTabbedPane;
    private javax.swing.JLabel utilizadorEncarregueLabel;
    private javax.swing.JLabel utilizadorEncarregueValue;
    private javax.swing.JLabel utilizadorEncarrregueEmptyLabel;
    private javax.swing.JButton voltarButton;
    // End of variables declaration//GEN-END:variables
}
